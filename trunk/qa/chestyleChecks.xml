<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.1//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_1.dtd">

<!-- Copyright (c) 2015 Werner Jaeger. All rights reserved. -->
<!-- $Id$ -->

<!--

  A Checkstyle configuration that checks against the recommendations
  of the Java Programning Guidelines by Scott Ambler
-->

<module name="Checker">
<!--   <property name="basedir" value="${basedir}"/>-->

   <module name="SuppressionFilter">
      <property name="file" value="${checkstyle.filter.file}"/>
   </module>

   <!-- Checks for long source files -->
   <module name="FileLength" />

   <!-- Check to find trailing whitespace at the end of a line -->
   <module name="RegexpSingleline">
      <property name="format" value="\s+$"/>
   </module>

   <!-- enforce the existence of a package.html file for each package -->
   <module name="JavadocPackage">
   	<property name="allowLegacy" value="true"/>
   </module>

   <!-- Checks that there are no tab characters ('\t') in the source code -->
   <module name="FileTabCharacter"/>

   <!-- ensures the correct translation of code by checking property files for consistency regarding their keys -->
   <module name="Translation"/>
<!--
   <module name="au.com.redhillconsulting.simian.SimianCheck">
      <property name="language" value="java"/>
      <property name="threshold" value="${checkstyle.StrictDuplicateCode.lines}"/>
   </module>
-->
   <module name="TreeWalker">

      <property name="cacheFile" value="${user.home}/.checkstylecache" />
      <property name="tabWidth" value="3" />

      <!-- ensures javadoc comment for package scope and the existence of an @author tag -->
      <module name="JavadocType">
         <property name="scope" value="package"/>
         <property name="authorFormat" value=".+"/>
      </module>

      <!-- Checks that variables have Javadoc comments -->
      <module name="JavadocVariable">
         <property name="scope" value="package"/>
      </module>

      <!-- Validates Javadoc comments to help ensure they are well formed. -->
      <module name="JavadocStyle">
         <property name="scope" value="package"/>
         <property name="checkFirstSentence" value="false"/>
         <property name="checkEmptyJavadoc" value="true"/>
      </module>

      <!-- Checks to ensure that the following tags exist (if required): @return, @param, @throws or @exception, @see or {@inheritDoc} -->
      <module name="JavadocMethod">
         <property name="scope" value="package"/>
         <property name="allowUndeclaredRTE" value="true"/>
      </module>

      <!-- Checks that pagage variables have Javadoc comments -->
      <module name="JavadocVariable">
         <property name="scope" value="package"/>
      </module>

      <!-- Checks correct indentation of Java Code -->
      <module name="Indentation">
         <property name="basicOffset" value="3"/>
         <property name="caseIndent" value="3"/>
      </module>

      <!-- Checks for Naming Conventions -->
      <module name="ConstantName"/>
      <module name="LocalFinalVariableName"/>
      <module name="LocalVariableName"/>
      <module name="MemberName">
         <property name="format" value="^m_[a-zA-Z0-9]*$"/>
      </module>
      <module name="MethodName"/>
      <module name="PackageName">
         <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
      </module>
      <module name="ParameterName"/>
      <module name="StaticVariableName">
         <property name="format" value="^m_[a-zA-Z0-9]*$"/>
      </module>
<!--      <module name="TypeName">
         <property name="format" value="^I[A-Z][a-zA-Z0-9]*$"/>
         <property name="tokens" value="INTERFACE_DEF"/>
      </module>
-->
      <!-- Check that method/constructor parameters are final -->
      <module name="FinalParameters"/>

      <!-- Checks that local variables that never have their values changed are declared final -->
      <module name="FinalLocalVariable"/>

      <!-- Restrict the number of return statements -->
      <module name="ReturnCount">
         <property name="max" value="1"/>
      </module>

      <!-- Checks for multiple occurrences of the same string literal within a single file -->
<!--      <module name="MultipleStringLiterals"/>
-->
      <!-- Checks cyclomatic complexity against a specified limit -->
      <module name="CyclomaticComplexity">
         <property name="max" value="38"/>
      </module>

      <!-- Checks the style of array type definitions is like Java-style: public static void main(String[] args) -->
      <module name="ArrayTypeStyle"/>

      <!-- Checks that there are no import statements that use the * notation -->
      <module name="AvoidStarImport"/>

      <!-- Checks for imports from a set of illegal packages. By default, the check rejects all sun.* packages -->
      <module name="IllegalImport"/>

      <!-- Checks for redundant import statements -->
      <module name="RedundantImport"/>

      <!-- Checks for unused import statements -->
      <module name="UnusedImports"/>

      <!-- Checks for long lines -->
      <module name="LineLength">
         <property name="max" value="1024"/>
      </module>

      <!-- Checks for long methods and constructors -->
      <module name="MethodLength">
         <property name="tokens" value="METHOD_DEF"/>
         <property name="max" value="170"/>
      </module>
      <module name="MethodLength">
         <property name="tokens" value="CTOR_DEF"/>
         <property name="max" value="70"/>
      </module>

      <!-- Checks the number of parameters of a method or constructor -->
      <module name="ParameterNumber">
         <property name="max" value="9"/>
         <property name="tokens" value="METHOD_DEF"/>
      </module>
      <module name="ParameterNumber">
         <property name="max" value="11"/>
         <property name="tokens" value="CTOR_DEF"/>
      </module>

      <!-- Checks that there is no whitespace after a token -->
      <module name="NoWhitespaceAfter">
         <property name="tokens" value="DOT, BNOT, UNARY_MINUS, UNARY_PLUS"/>
         <property name="allowLineBreaks" value="false"/>
      </module>

      <!-- Checks that there is no whitespace before a token -->
      <module name="NoWhitespaceBefore"/>

      <!-- Checks the policy on how to wrap lines on operators -->
      <module name="OperatorWrap"/>

      <!-- Checks the policy on the padding of parentheses; space after a left parenthesis and before a right parenthesis are forbidden. -->
      <module name="ParenPad"/>

      <!-- Checks that COMMA and SEMI tokens are followed by whitespace -->
      <module name="WhitespaceAfter">
         <property name="tokens" value="COMMA, SEMI"/>
      </module>

      <!-- Checks that a token is surrounded by whitespace -->
      <module name="WhitespaceAround">
         <property name="tokens" value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, EQUAL, GE, GT, LAND, LE, LITERAL_ASSERT, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, SL, SLIST, SL_ASSIGN, SR, SR_ASSIGN, STAR, STAR_ASSIGN"/>
      </module>

      <!-- Checks that the order of modifiers conforms to the suggestions in the Java Language specification, sections 8.1.1, 8.3.1 and 8.4.3 -->
      <module name="ModifierOrder"/>

      <!-- Checks that method declarations in interfaces include neither the public modifier nor the abstract modifier -->
      <module name="RedundantModifier"/>

      <!-- Checks visibility of class members. Only static final members may be public; other class members must be private or protected. -->
      <module name="VisibilityModifier">
         <property name="protectedAllowed" value="true"/>
      </module>

      <!-- Checks if any class or object member explicitly initialized to default for its type value -->
      <module name="ExplicitInitialization"/>

      <!-- Checks for empty blocks -->
      <module name="EmptyBlock"/>

      <!-- Checks for the placement of left curly braces ('{') for code blocks -->
      <module name="LeftCurly">
         <property name="option" value="nl"/>
      </module>

      <!-- Checks the placement of right curly braces ('}') for else, try, and catch tokens -->
      <module name="RightCurly">
         <property name="option" value="alone"/>
      </module>

      <!-- Checks that classes that override equals() also override hashCode() -->
      <module name="EqualsHashCode"/>

      <!-- Checks that classes that define a covariant equals() method also override method equals(java.lang.Object) -->
      <module name="CovariantEquals"/>

      <!-- Checks that a local variable or a parameter does not shadow a field that is defined in the same class -->
      <module name="HiddenField"/>

      <!-- Checks for illegal instantiations where a factory method is preferred -->
<!--      <module name="IllegalInstantiation">
         <property name="classes" value="java.lang.Boolean, java.lang.String"/>
      </module>
-->
      <!-- Checks for assignments in subexpressions, such as in String s = Integer.toString(i = 2); -->
<!--      <module name="InnerAssignment"/>
-->
      <!-- Checks for overly complicated boolean expressions. Currently finds code like if (b == true), b || true, !false, etc -->
      <module name="SimplifyBooleanExpression"/>

      <!-- Checks for overly complicated boolean return statements -->
      <module name="SimplifyBooleanReturn"/>

      <!-- A check for TODO: comments -->
<!--      <module name="TodoComment">
         <property name="format" value="TODO"/>
      </module>
-->
      <!-- Checks that long constants are defined with an upper ell. That is ' L' and not 'l'. This is in accordance to the Java Language Specification, Section 3.10.1 -->
      <module name="UpperEll"/>

      <!-- Checks for uncommented main() methods (debugging leftovers) -->
		<module name="UncommentedMain">
		   <property name="excludedClasses" value="BackupMessageViewerApplication"/>
		</module>

		<!-- Checks that there are no "magic numbers", where a magic number is a numeric literal that is not defined as a constant -->
<!--		<module name="MagicNumber"/>
-->
		<!-- Checks that switch statement has "default" clause -->
		<module name="MissingSwitchDefault"/>

		<!-- Make sure that utility classes (classes that contain only static methods) do not have a public constructor -->
		<module name="HideUtilityClassConstructor"/>
   </module>

</module>
